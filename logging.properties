############################################################
#  	Custom Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
# or change in pom.xml file
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
handlers= java.util.logging.ConsoleHandler
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# FINEST  >>  FINER  >>  FINE  >> INFO  >>  WARNING  >>  SEVERE
.level= INFO

# Customization of the SimpleFormatter output format 

# 2017-10-15 16:00:16 INFO org.openqa.selenium.remote.ProtocolHandshake createSession Detected dialect: OSS
#                                        date              time              lvl  who  msg
java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$s %2$s %5$s%6$s%n

#     <level>: <log message> [<date/time>]
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

#java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$s: %5$s%6$s%n
#java.util.logging.SimpleFormatter.format="%1$tF %1$tT %4$s %2$s %5$s%6$s%n


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
org.prosky.ghost.level = FINEST


############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
# Default file output is in user's home directory = %h/java%u.log
############################################################

java.util.logging.FileHandler.pattern	= %h/java%u.log
#java.util.logging.FileHandler.pattern   = log.%u.%g.txt
java.util.logging.FileHandler.level     	= WARNING
java.util.logging.FileHandler.limit 		= 50000
java.util.logging.FileHandler.count 		= 1
java.util.logging.FileHandler.formatter 	= java.util.logging.XMLFormatter
java.util.logging.FileHandler.append    	= false
java.util.logging.FileHandler.filter    	=
java.util.logging.FileHandler.encoding  	=

java.util.logging.ConsoleHandler.level 		= INFO
java.util.logging.ConsoleHandler.formatter 	= java.util.logging.SimpleFormatter
#java.util.logging.ConsoleHandler.formatter  = java.util.logging.XMLFormatter
#java.util.logging.ConsoleHandler.formatter  = org.testng.log.TextFormatter
java.util.logging.ConsoleHandler.filter    	=
java.util.logging.ConsoleHandler.encoding  	=
                              
java.util.logging.StreamHandler.level     = WARNING
java.util.logging.StreamHandler.filter    =
java.util.logging.StreamHandler.formatter =
java.util.logging.StreamHandler.encoding  =

java.util.logging.SocketHandler.level     = WARNING
java.util.logging.SocketHandler.filter    =
java.util.logging.SocketHandler.formatter =
java.util.logging.SocketHandler.encoding  =
java.util.logging.SocketHandler.host      =
java.util.logging.SocketHandler.port      =

java.util.logging.MemoryHandler.level     = WARNING
java.util.logging.MemoryHandler.filter    =
java.util.logging.MemoryHandler.size      =
java.util.logging.MemoryHandler.push      =
java.util.logging.MemoryHandler.target    =







